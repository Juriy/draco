{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 51c811a6deb0dab0809e","webpack:///./src/index.js","webpack:///./src/Animator.js","webpack:///./src/DirtyRectangleManager.js","webpack:///./src/Rect.js","webpack:///./src/Engine.js","webpack:///./src/input/Keyboard.js","webpack:///./src/EventEmitter.js","webpack:///./src/input/TouchInputHandler.js","webpack:///./src/input/InputHandlerBase.js","webpack:///./src/input/MouseInputHandler.js","webpack:///./src/ImageManager.js","webpack:///./src/GameScene.js","webpack:///./src/GameObject.js","webpack:///./~/gl-matrix/src/gl-matrix.js","webpack:///./~/gl-matrix/src/gl-matrix/common.js","webpack:///./~/gl-matrix/src/gl-matrix/mat2.js","webpack:///./~/gl-matrix/src/gl-matrix/mat2d.js","webpack:///./~/gl-matrix/src/gl-matrix/mat3.js","webpack:///./~/gl-matrix/src/gl-matrix/mat4.js","webpack:///./~/gl-matrix/src/gl-matrix/quat.js","webpack:///./~/gl-matrix/src/gl-matrix/vec3.js","webpack:///./~/gl-matrix/src/gl-matrix/vec4.js","webpack:///./~/gl-matrix/src/gl-matrix/vec2.js","webpack:///./src/utils.js","webpack:///./src/MathUtils.js","webpack:///./src/ui/index.js","webpack:///./src/ui/Rectangle.js","webpack:///./src/ui/Shapes.js","webpack:///./src/ui/Sprite.js","webpack:///./src/ui/SpriteSheet.js","webpack:///./src/ui/TileSheet.js","webpack:///./src/ui/map/TileMapOrtho.js"],"names":[],"mappings":"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AK,OAAV,EAAmB;AAClB;AACA;;AAED,SAAK,OAAL,CAAa,WAAb,CAAyB,IAAzB;AACA;;;;;;;;mBAvMmB,U;AA0MrB,YAAW,GAAX,GAAiB,CAAjB;;;;;;;AChNA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;ACpCA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAU,OAAO;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;ACrEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB;;AAEA,mC;AACA,sB;AACA,iB;AACA,iB;AACA,+B;AACA,sB;AACA,G;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnbA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,cAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,YAAW,OAAO;AAClB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,YAAW,KAAK;AAChB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,YAAW,KAAK;AAChB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,OAAO;AAClB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,KAAK;AAChB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,KAAK;AAChB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,cAAa,OAAO;AACpB;AACA,4B;AACA;AACA,G;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,YAAW,OAAO;AAClB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,YAAW,OAAO;AAClB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,MAAM;AACjB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpdA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,gB;AACA,qB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,MAAM;AACjB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAU,KAAK;AACf,WAAU,KAAK;AACf;AACA,aAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAU,KAAK;AACf,WAAU,KAAK;AACf;AACA,aAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gB;AACA,qB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;ACzuBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ,WAAU;AACV;;AAEA;AACA;AACA;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAc,WAAW,WAAW;AACpC;AACA;AACA;AACA;;AAEA,eAAc,WAAW,YAAY;AACrC;AACA;AACA;AACA;;AAEA,gBAAe,YAAY,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,oBAAmB,YAAY,YAAY;AAC3C,oBAAmB,YAAY,YAAY;AAC3C,oBAAmB,YAAY,aAAa;;AAE5C,sBAAqB,cAAc,cAAc;AACjD,sBAAqB,cAAc,cAAc;AACjD,sBAAqB,cAAc,eAAe;;AAElD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAsB,eAAe,eAAe;AACpD,uBAAsB,eAAe,eAAe;AACpD,uBAAsB,eAAe,iBAAiB;AACtD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA2C,aAAa;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAe,YAAY,YAAY;AACvC,gBAAe,YAAY,YAAY;AACvC,gBAAe,YAAY,aAAa;;AAExC;AACA,yBAAwB,yBAAyB;AACjD,6BAA4B,qBAAqB;AACjD,6BAA4B,yBAAyB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA,4CAA2C,aAAa;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,MAAM;AACjB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAY,KAAK;AACjB,aAAY,KAAK;AACjB,aAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,aAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA,mB;AACA;AACA;AACA;AACA,oC;AACA,oC;AACA,IAAG,iD;AACH;AACA;AACA;AACA,oC;AACA,oC;AACA,IAAG,6B;AACH;AACA;AACA,oC;AACA;AACA,oC;AACA,IAAG,O;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,MAAM;AACjB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,MAAM;AACjB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;;;;ACvlEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY,KAAK;AACjB,aAAY,KAAK;AACjB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA,gB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA,gB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA,gB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK,O;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAwC;AACxC;AACA,2BAA0B;AAC1B;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;;AAEA;;;;;;;ACvlBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,SAAS;AACpB,YAAW,OAAO;AAClB,cAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA,wBAAuB,OAAO;AAC9B,2BAA0B,iBAAiB;AAC3C;AACA,2BAA0B,iBAAiB;AAC3C;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,MAAK;AACL;AACA,M;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACxwBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,SAAS;AACpB,YAAW,OAAO;AAClB,cAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA,wBAAuB,OAAO;AAC9B,2BAA0B,iBAAiB,iBAAiB;AAC5D;AACA,2BAA0B,iBAAiB,iBAAiB;AAC5D;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChmBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,MAAM;AACjB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,SAAS;AACpB,YAAW,OAAO;AAClB,cAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA,wBAAuB,OAAO;AAC9B,2BAA0B;AAC1B;AACA,2BAA0B;AAC1B;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA,YAAW,KAAK;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,KAAK;AAChB,cAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;A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","file":"draco.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"draco\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"draco\"] = factory();\n\telse\n\t\troot[\"draco\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 51c811a6deb0dab0809e\n **/","'use strict';\n\nimport Animator from './Animator';\nimport DirtyRectangleManager from './DirtyRectangleManager';\nimport Engine from './Engine';\nimport EventEmitter from './EventEmitter';\nimport GameObject from './GameObject';\nimport GameScene from './GameScene';\nimport ImageManager from './ImageManager';\nimport MathUtils from './MathUtils';\nimport Rect from './Rect';\nimport {isTouchDevice, dist} from './utils';\nimport * as ui from './ui/index';\n\nexport {Animator, DirtyRectangleManager, Engine, EventEmitter, GameObject,\n\tGameScene, ImageManager, MathUtils, Rect, isTouchDevice, dist, ui};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","'use strict';\r\n\r\n/**\r\n * This is the base class to support the animation.\r\n * @param duration - the duration of the one loop of the animation in milliseconds.\r\n * For example, for a 6-frame animation where each frame is staying on the\r\n * screen for 50 milliseconds the duration will be 300 milliseconds.\r\n *\r\n * The constructor accepts the bare minimum of parameters: the rest is set via setters:\r\n * setRepeatBehavior and setRepeatCount (see the function docs for the details)\r\n *\r\n * Animator doesn't handle the timing internally. It should be used with the external\r\n * timer. The external timer calls the update() function, passing the number of milliseconds\r\n * since the previous call as the parameter.\r\n */\r\nexport default class Animator {\r\n\tconstructor(duration) {\r\n\t\tthis._duration = duration;\r\n\r\n\t\t// total loops to do\r\n\t\tthis._repeatCount = 1;\r\n\r\n\t\t// the fraction to accelerate\r\n\t\tthis._acceleration = 0;\r\n\r\n\t\t// the fraction to decelerate\r\n\t\tthis._deceleration = 0;\r\n\r\n\t\t// How many loops were actually done\r\n\t\tthis._loopsDone = 0;\r\n\r\n\t\t// Default repeat behavior is LOOP\r\n\t\tthis._repeatBehavior = Animator.RepeatBehavior.LOOP;\r\n\r\n\t\t// Time, passed since the start of the loop\r\n\t\tthis._timeSinceLoopStart = 0;\r\n\r\n\t\t// This flag is used to indicate that the animator has already\r\n\t\t// started to work with the certain configuration of parameters (repeatCount, repeat\r\n\t\tthis._started = false;\r\n\t\tthis._running = false;\r\n\r\n\t\t// Flag to mark that this loop is going into the opposite direction\r\n\t\tthis._reverseLoop = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starts the animator. After the animator is started you can't\r\n\t * change its parameters until stop() is called.\r\n\t */\r\n\tstart() {\r\n\t\tthis._started = true;\r\n\t\tthis._running = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if animator is currently running\r\n\t */\r\n\tisRunning() {\r\n\t\treturn this._running;\r\n\t}\r\n\r\n\t/**\r\n\t * Stops the animator and resets the internal state. This function\r\n\t * may be called multiple times.\r\n\t */\r\n\tstop() {\r\n\t\tthis._loopsDone = 0;\r\n\t\tthis._timeSinceLoopStart = 0;\r\n\t\tthis._running = false;\r\n\t\tthis._started = false;\r\n\t};\r\n\r\n\t/**\r\n\t * Pauses the animator. The animator will ignore the updates while paused, \"freezing\"\r\n\t * the animation but not resetting its state. The animation can be then resumed\r\n\t */\r\n\tpause() {\r\n\t\tthis._running = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the duration of one loop of the animation\r\n\t */\r\n\tgetDuration() {\r\n\t\treturn this._duration;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the duration of one loop of the animation. Should be value >=1\r\n\t */\r\n\tsetDuration(duration) {\r\n\t\tthis._throwIfStarted();\r\n\t\tif (duration < 1) {\r\n\t\t\tthrow Error('Duration can\\'t be < 1');\r\n\t\t}\r\n\t\tthis._duration = duration;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the configured repeat count, default is 1.\r\n\t */\r\n\tgetRepeatCount() {\r\n\t\treturn this._repeatCount;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the number of loops in the animation, default is 1. Valid values\r\n\t * are integers, -1 or Animator.INFINITE for infinite looping\r\n\t */\r\n\tsetRepeatCount(repeatCount) {\r\n\t\tthis._throwIfStarted();\r\n\r\n\t\tif (repeatCount < 1 && repeatCount !== Animator.INFINITE) {\r\n\t\t\tthrow Error('Repeat count must be greater than 0 or INFINITE');\r\n\t\t}\r\n\t\tthis._repeatCount = repeatCount;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the configured repeat behavior of the animator. Possible values are\r\n\t * Animator.RepeatBehavior.LOOP and Animator.RepeatBehavior.REPATE. Read the docs for\r\n\t * Animator.RepeatBehavior for the details on how they differ.\r\n\t */\r\n\tgetRepeatBehavior() {\r\n\t\treturn this._repeatBehavior;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the repeat behavior, default value is Animator.RepeatBehavior.LOOP\r\n\t * @param behavior the new repat behavior\r\n\t */\r\n\tsetRepeatBehavior(behavior) {\r\n\t\tthis._throwIfStarted();\r\n\t\tif (behavior !== Animator.RepeatBehavior.LOOP &&\r\n\t\t\t\tbehavior !== Animator.RepeatBehavior.REVERSE) {\r\n\t\t\tthrow Error('Repeat behavior should be either RepeatBehavior.LOOP' +\r\n\t\t\t\t' or RepeatBehavior.REVERSE');\r\n\t\t}\r\n\t\tthis._repeatBehavior = behavior;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current value for the acceleration, default is 0.\r\n\t */\r\n\tgetAcceleration() {\r\n\t\treturn this._acceleration;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value for the acceleration. The value must be between 0 and 1-deceleration.\r\n\t * @param acceleration new acceleration\r\n\t */\r\n\tsetAcceleration(acceleration) {\r\n\t\tthis._throwIfStarted();\r\n\t\tif (acceleration < 0 || acceleration > 1 || acceleration > (1 - this._deceleration)) {\r\n\t\t\tthrow Error('Acceleration value must be from 0 to 1 and ' +\r\n\t\t\t\t'cannot be greater than (1 - deceleration)');\r\n\t\t}\r\n\r\n\t\tthis._acceleration = acceleration;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current value for the deceleration, default is 0.\r\n\t */\r\n\tgetDeceleration() {\r\n\t\treturn this._deceleration;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value for the deceleraion. The value must be between 0 and 1-deceleration.\r\n\t * @param deceleration new deceleration\r\n\t */\r\n\tsetDeceleration(deceleration) {\r\n\t\tthis._throwIfStarted();\r\n\t\tif (deceleration < 0 || deceleration > 1 || deceleration > (1 - this._acceleration)) {\r\n\t\t\tthrow Error('Deceleration value must be from 0 to 1 ' +\r\n\t\t\t\t'and cannot be greater than (1 - acceleration)');\r\n\t\t}\r\n\r\n\t\tthis._deceleration = deceleration;\r\n\t}\r\n\r\n\t/**\r\n\t * In the default implementation the preprocessor takes into the account\r\n\t * only acceleration and deceleration. In more advanced implementation it might\r\n\t * use easing functions or any other more advanced transformations.\r\n\t */\r\n\t_timingEventPreprocessor(fraction) {\r\n\t\treturn this._accelerationDecelerationPreprocessor(fraction);\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the fraction with the respect to the acceleration and deceleration values.\r\n\t * See the SMIL 2.0 specification for details on this calculation. You shouldn't really dive deep\r\n\t * into the details of this particular piece of code, if you're not very curious.\r\n\t */\r\n\t_accelerationDecelerationPreprocessor(fraction) {\r\n\t\tif (this._acceleration || this._deceleration) {\r\n\t\t\tlet runRate = 1 / (1 - this._acceleration / 2 - this._deceleration / 2);\r\n\r\n\t\t\tif (fraction < this._acceleration) {\r\n\t\t\t\tfraction *= runRate * (fraction / this._acceleration) / 2;\r\n\t\t\t} else if (fraction > (1 - this._deceleration)) {\r\n\t\t\t\t// time spent in deceleration portion\r\n\t\t\t\tlet tdec = fraction - (1 - this._deceleration);\r\n\t\t\t\t// proportion of tdec to total deceleration time\r\n\t\t\t\tlet pdec = tdec / this._deceleration;\r\n\r\n\t\t\t\tfraction = runRate * (1 - (this._acceleration / 2) -\r\n\t\t\t\t\tthis._deceleration + tdec * (2 - pdec) / 2);\r\n\t\t\t} else {\r\n\t\t\t\tfraction = runRate * (fraction - (this._acceleration / 2));\r\n\t\t\t}\r\n\t\t\t// clamp fraction to [0,1] since above calculations may\r\n\t\t\t// cause rounding errors\r\n\t\t\tif (fraction < 0) {\r\n\t\t\t\tfraction = 0;\r\n\t\t\t} else if (fraction > 1) {\r\n\t\t\t\tfraction = 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn fraction;\r\n\t}\r\n\r\n\t/**\r\n\t * This function should be called by the external timer to update the state\r\n\t * of the animator.\r\n\t * @param deltaTime - time passed since the last upate. 0 is valid value.\r\n\t */\r\n\tupdate(deltaTime) {\r\n\t\t// Will return undefined\r\n\t\tif (!this._started) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// If the animator is paused we pass 0 as deltaTime - like nothing has changed\r\n\t\tif (!this._running) {\r\n\t\t\tdeltaTime = 0;\r\n\t\t}\r\n\r\n\t\tthis._timeSinceLoopStart += deltaTime;\r\n\r\n\t\t// If we exceeded the loop time, we must take care of what to do next:\r\n\t\t// adjust the direction of the animation, call hook functions etc.\r\n\t\tif (this._timeSinceLoopStart >= this._duration) {\r\n\r\n\t\t\t// Just in case, we skipped more than one loop, determine how many loops did we miss\r\n\t\t\tlet loopsSkipped = Math.floor(this._timeSinceLoopStart / this._duration);\r\n\r\n\t\t\tthis._timeSinceLoopStart %= this._duration;\r\n\r\n\t\t\t// truncate to the number of loops skipped. Even if we skipped 5 loops,\r\n\t\t\t// but there was only 3 left, we don't want to fire extra listeners.\r\n\t\t\tif (this._repeatCount !== Animator.INFINITE && loopsSkipped >\r\n\t\t\t\t\tthis._repeatCount - this._loopsDone) {\r\n\t\t\t\tloopsSkipped = this._repeatCount - this._loopsDone;\r\n\t\t\t}\r\n\r\n\t\t\t// Call the hook for each of the skipped loops\r\n\t\t\tfor (let i = 1; i <= loopsSkipped; i++) {\r\n\t\t\t\tthis._loopsDone++;\r\n\t\t\t\tthis._reverseLoop = this._repeatBehavior === Animator.RepeatBehavior.REVERSE &&\r\n\t\t\t\t\tthis._loopsDone % 2 === 1;\r\n\t\t\t\tthis._onLoopEnd(this._loopsDone);\r\n\t\t\t}\r\n\r\n\t\t\t// Check if we reached the end of the animation\r\n\t\t\tif (this._repeatCount !== Animator.INFINITE &&\r\n\t\t\t\t\tthis._loopsDone === this._repeatCount) {\r\n\t\t\t\tthis._onAnimationEnd();\r\n\t\t\t\tthis.stop();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If this is the loop that is going backwards - reverse the fraction as well\r\n\t\tlet fraction = this._timeSinceLoopStart / this._duration;\r\n\r\n\t\tif (this._reverseLoop) {\r\n\t\t\tfraction = 1 - fraction;\r\n\t\t}\r\n\r\n\t\t// Give away for preprocessing (acceleration/deceleration, easing functions etc)\r\n\t\tfraction = this._timingEventPreprocessor(fraction);\r\n\r\n\t\t// Call update\r\n\t\tthis._onUpdate(fraction, this._loopsDone);\r\n\t\treturn fraction;\r\n\t}\r\n\r\n\t/**\r\n\t * Hook function. Override in subclass to provide the specific\r\n\t * implementation of the updates. For example, you may change the\r\n\t * active frame, adjust the coordinates or color of the object.\r\n\t *\r\n\t * @param fraction the current fraction of the animation: from 0 to 1\r\n\t * @param loopsDone how many loops done already.\r\n\t */\r\n\t_onUpdate(fraction, loopsDone) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Hook function - called when the loop ends. Should be owerwritten in\r\n\t * subclasses if you need any extra functionality here.\r\n\t * @param loopsDone the number of loops done from the start of the animation,\r\n\t * the latest loop is included.\r\n\t */\r\n\t_onLoopEnd(loopsDone) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Hook function - called when the animation ends to be owerwritten in\r\n\t * subclasses if you need any extra functionality here.\r\n\t */\r\n\t_onAnimationEnd() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called to ensure that the animator is not running\r\n\t * (changing the setting of the running animator is not allowed)\r\n\t */\r\n\t_throwIfStarted() {\r\n\t\tif (this._started) {\r\n\t\t\tthrow Error('Cannot change property on the started animator');\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A possible parameter to setLoopCount.\r\n */\r\nAnimator.INFINITE = -1;\r\n\r\n/**\r\n * RepeatBehavior determines what animator does after reaching the end of the loop.\r\n * If it is set to Animator.RepeatBehavior.LOOP, then the next loop will start from 0 again,\r\n * proceeding to 1. If the behavior is Animator.RepeatBehavior.REVERSE the odd loops will run\r\n * backwards - from 1 to 0. Obviously setting this parameter only makes sense when the\r\n * number of loops is more than 1.\r\n */\r\nAnimator.RepeatBehavior = {\r\n\tLOOP: 1,\r\n\tREVERSE: 2\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/Animator.js\n **/","'use strict';\n\nimport Rect from './Rect';\n\nexport default class DirtyRectangleManager {\n\n\tconstructor(allDirtyThreshold = 0.5) {\n\t\tthis._allDirtyThreshold = allDirtyThreshold;\n\t\tthis._viewport = new Rect(0, 0, 100, 100);\n\t\tthis._dirtyRect = null;\n\t\tthis._allDirty = true;\n\t\tthis.markAllDirty();\n\t}\n\n\tclear() {\n\t\tthis._dirtyRect = null;\n\t\tthis._allDirty = false;\n\t}\n\n\tmarkDirty(rect) {\n\t\tif (!(rect.width || rect.height) || this._allDirty) {\n\t\t\treturn;\n\t\t}\n\n\t\trect = this._viewport.intersection(rect);\n\n\t\tif (!rect) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._dirtyRect) {\n\t\t\tthis._dirtyRect = this._dirtyRect.convexHull(rect);\n\t\t\tif (this._dirtyRect.width * this._dirtyRect.height >\n\t\t\t\tthis._allDirtyThreshold * this._viewport.width * this._viewport.height) {\n\t\t\t\tthis.markAllDirty();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._dirtyRect = this._viewport.intersection(rect);\n\t\t}\n\t}\n\n\tmarkAllDirty() {\n\t\tthis._allDirty = true;\n\t\tthis._dirtyRect = this._viewport.copy();\n\t}\n\n\tisClean() {\n\t\treturn !(this._dirtyRect);\n\t}\n\n\tisAllDirty() {\n\t\treturn this._allDirty;\n\t}\n\n\tgetDirtyRect() {\n\t\treturn this._dirtyRect;\n\t}\n\n\tsetViewport(width, height) {\n\t\tif (this._viewport.width === width && this._viewport.height === height) {\n\t\t\treturn;\n\t\t}\n\t\tthis._viewport.width = width;\n\t\tthis._viewport.height = height;\n\t\tthis.markAllDirty();\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/DirtyRectangleManager.js\n **/","'use strict';\r\n\r\n/**\r\n * TODO: refactor-out object destructuring\r\n */\r\nexport default class Rect {\r\n\r\n\tconstructor(x, y, width, height) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\tcopy() {\r\n\t\treturn new Rect(this.x, this.y, this.width, this.height);\r\n\t}\r\n\r\n\tequals(r2) {\r\n\t\treturn (this.x === r2.x &&\r\n\t\tthis.y === r2.y &&\r\n\t\tthis.width === r2.width &&\r\n\t\tthis.height === r2.height);\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn (`[x=${this.x}, y=${this.y},` +\r\n\t\t\t`width=${this.width}, height=${this.height}]`);\r\n\t}\r\n\r\n\tintersects(x2, y2, w2, h2) {\r\n\t\tif (arguments.length === 1) {\r\n\t\t\tlet r = x2;\r\n\r\n\t\t\tx2 = r.x;\r\n\t\t\ty2 = r.y;\r\n\t\t\tw2 = r.width;\r\n\t\t\th2 = r.height;\r\n\t\t}\r\n\r\n\t\treturn (this.x <= x2 + w2 && this.x + this.width >= x2 &&\r\n\t\t\tthis.y <= y2 + h2 && this.y + this.height >= y2);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the given rect fully covers the other one\r\n\t */\r\n\tcovers(x2, y2, w2, h2) {\r\n\t\tif (arguments.length === 1) {\r\n\t\t\tlet r = x2;\r\n\r\n\t\t\tx2 = r.x;\r\n\t\t\ty2 = r.y;\r\n\t\t\tw2 = r.width;\r\n\t\t\th2 = r.height;\r\n\t\t}\r\n\r\n\t\treturn (x2 >= this.x &&\r\n\t\t\ty2 >= this.y &&\r\n\t\t\tx2 + w2 <= this.x + this.width &&\r\n\t\t\ty2 + h2 <= this.y + this.height);\r\n\t}\r\n\r\n\t/**\r\n\t * Assumes that neither of rectangles is zero-area\r\n\t */\r\n\tconvexHull(x2, y2, w2, h2) {\r\n\t\tif (arguments.length === 1) {\r\n\t\t\tlet r = x2;\r\n\r\n\t\t\tx2 = r.x;\r\n\t\t\ty2 = r.y;\r\n\t\t\tw2 = r.width;\r\n\t\t\th2 = r.height;\r\n\t\t}\r\n\r\n\t\tlet x = Math.min(this.x, x2);\r\n\t\tlet y = Math.min(this.y, y2);\r\n\t\tlet width = Math.max(this.x + this.width, x2 + w2) - x;\r\n\t\tlet height = Math.max(this.y + this.height, y2 + h2) - y;\r\n\r\n\t\treturn new Rect(x, y, width, height);\r\n\t}\r\n\r\n\tintersection(x2, y2, w2, h2) {\r\n\t\tif (arguments.length === 1) {\r\n\t\t\tlet r = x2;\r\n\r\n\t\t\tx2 = r.x;\r\n\t\t\ty2 = r.y;\r\n\t\t\tw2 = r.width;\r\n\t\t\th2 = r.height;\r\n\t\t}\r\n\r\n\t\tlet x = Math.max(this.x, x2);\r\n\t\tlet y = Math.max(this.y, y2);\r\n\t\tlet width = Math.min(this.x + this.width, x2 + w2) - x;\r\n\t\tlet height = Math.min(this.y + this.height, y2 + h2) - y;\r\n\r\n\t\tif (width <= 0 || height <= 0) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn new Rect(x, y, width, height);\r\n\t}\r\n\r\n\tcontainsPoint(x, y) {\r\n\t\treturn x >= this.x && x < this.x + this.width &&\r\n\t\t\ty >= this.y && y < this.y + this.height;\r\n\t}\r\n\r\n\t/**\r\n\t * Given a rectangular grid, with the grid cell size cellW, cellH test which cells\r\n\t * are overlapped by the rectangle. cellsInRow and cellsInColumn are used only\r\n\t * to limit the coordinates (to prevent going out of bounds in arrays for example)\r\n\t *\r\n\t */\r\n\tgetOverlappingGridCells(cellW, cellH, cellsInRow, cellsInColumn) {\r\n\t\tlet rectX = Math.max(0, Math.floor(this.x / cellW));\r\n\t\tlet rectY = Math.max(0, Math.floor(this.y / cellH));\r\n\t\tlet rectWidth = Math.min(cellsInRow - rectX,\r\n\t\t\tMath.floor((this.x + this.width) / cellW) - rectX + 1);\r\n\t\tlet rectHeight = Math.min(cellsInColumn - rectY,\r\n\t\t\tMath.floor((this.y + this.height) / cellH) - rectY + 1);\r\n\r\n\t\treturn new Rect(rectX, rectY, rectWidth, rectHeight);\r\n\t}\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/Rect.js\n **/","'use strict';\n\nimport Keyboard from './input/Keyboard';\nimport TouchInputHandler from './input/TouchInputHandler';\nimport MouseInputHandler from './input/MouseInputHandler';\nimport DirtyRectangleManager from './DirtyRectangleManager';\nimport ImageManager from './ImageManager';\nimport GameScene from './GameScene';\nimport {isTouchDevice} from './utils';\n\nexport default class Engine {\n\n\tconstructor(idOrElement, vpWidth, vpHeight) {\n\t\tlet canvas = this._canvas = this._getCanvasElement(idOrElement);\n\n\t\tif (vpWidth === undefined || vpHeight === undefined) {\n\t\t\tvpWidth = canvas.width;\n\t\t\tvpHeight = canvas.height;\n\t\t}\n\n\t\tthis._ctx = canvas.getContext('2d');\n\t\tthis._scenes = {};\n\t\tthis._currentScene = null;\n\t\tthis._lastTick = Date.now();\n\t\tthis._input = isTouchDevice() ? TouchInputHandler : MouseInputHandler;\n\t\tthis._keyboard = new Keyboard(canvas);\n\n\t\tthis._dirtyRects = new DirtyRectangleManager();\n\t\tthis._dirtyRects.setViewport(vpWidth, vpHeight);\n\t\tthis._resourceManager = new ImageManager();\n\t\tthis._tick = this._tick.bind(this);\n\n\t\tthis._gameContext = {\n\t\t\tresourceManager: this._resourceManager,\n\t\t\twidth: canvas.width,\n\t\t\theight: canvas.height\n\t\t};\n\n\t\tthis._initDefaultScene();\n\t}\n\n\tloadResources(resourceData, onDone) {\n\t\tthis._resourceManager.load(resourceData, onDone, function onProgress() {\n\t\t});\n\t}\n\n\tgetResource(name) {\n\t\treturn this._resourceManager.get(name);\n\t}\n\n\tgetScene() {\n\t\treturn this._currentScene;\n\t}\n\n\trunScene(id) {\n\t\tif (!this._scenes.hasOwnProperty(id)) {\n\t\t\tthrow Error(`Could not find scene [${id}] to run`);\n\t\t}\n\t\tthis._currentScene = this._scenes[id];\n\t\tthis._dirtyRects.markAllDirty();\n\t}\n\n\taddScene(id, scene) {\n\t\tscene.init(this._gameContext);\n\t\tthis._scenes[id] = scene;\n\t\tif (!this._currentScene) {\n\t\t\tthis.runScene(id);\n\t\t}\n\t}\n\n\tscene(id, scene) {\n\t\tif (scene === undefined) {\n\t\t\tthis.runScene(id);\n\t\t} else {\n\t\t\tthis.addScene(id, scene);\n\t\t}\n\t}\n\n\tstart() {\n\t\tthis._lastTick = Date.now();\n\t\tthis._tick();\n\t}\n\n\t_tick() {\n\t\trequestAnimationFrame(this._tick);\n\n\t\t// delta time\n\t\tlet dt = Date.now() - this._lastTick;\n\n\t\tthis._lastTick = Date.now();\n\n\t\t// frame context\n\t\tlet fc = {\n\t\t\tdt: dt,\n\t\t\tinput: this._input,\n\t\t\tkeyboard: this._keyboard,\n\t\t\tgraphContext: this._ctx,\n\t\t\twidth: this._canvas.width,\n\t\t\theight: this._canvas.height,\n\t\t\tdirtyRects: this._dirtyRects\n\t\t};\n\n\t\tif (!this._currentScene) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._update(fc);\n\n\t\tif (!this._dirtyRects.isClean()) {\n\t\t\tthis._draw(fc);\n\t\t}\n\n\t\tthis._keyboard.resetPressed();\n\t}\n\n\t_update(fc) {\n\t\tthis._currentScene.update(fc);\n\t}\n\n\t_draw(fc) {\n\t\tlet rect = this._dirtyRects.getDirtyRect();\n\n\t\tthis._ctx.save();\n\t\tthis._ctx.beginPath();\n\t\tthis._ctx.rect(rect.x, rect.y, rect.width, rect.height);\n\t\tthis._ctx.clip();\n\t\tthis._currentScene.draw(fc);\n\t\tthis._dirtyRects.clear();\n\t\tthis._ctx.restore();\n\t}\n\n\t_initDefaultScene() {\n\t\tthis.addScene('default', new GameScene());\n\t}\n\n\t_getCanvasElement(idOrElement) {\n\t\tif (typeof idOrElement === 'string') {\n\t\t\treturn document.getElementById(idOrElement);\n\t\t}\n\n\t\tif (idOrElement instanceof HTMLCanvasElement) {\n\t\t\treturn idOrElement;\n\t\t}\n\n\t\tthrow Error('Could not find <canvas> element to attach to Enine');\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/Engine.js\n **/","'use strict';\n\nimport EventEmitter from '../EventEmitter';\n\nexport default class Keyboard extends EventEmitter {\n\tconstructor(element) {\n\t\tsuper();\n\n\t\tthis._element = null;\n\t\tthis._stopDomEvents = true;\n\t\tthis._keys = [];\n\t\tthis._pressed = [];\n\n\t\tthis._onKeyDown = this._onKeyDown.bind(this);\n\t\tthis._onKeyUp = this._onKeyUp.bind(this);\n\n\t\tthis.attachTo(element);\n\t}\n\n\tdetach() {\n\t\tif (this._element) {\n\t\t\tthis._detachDomListeners();\n\t\t\tthis._element = null;\n\t\t}\n\t}\n\n\tattachTo(el) {\n\t\tif (this._element) {\n\t\t\tthis._detachDomListeners();\n\t\t}\n\n\t\tthis._element = el;\n\t\tif (el) {\n\t\t\tthis._attachDomListeners();\n\t\t}\n\t\tel.focus();\n\t}\n\n\tgetStopDomEvents() {\n\t\treturn this._stopDomEvents;\n\t}\n\n\tsetStopDomEvents(stopDomEvents) {\n\t\tthis._stopDomEvents = stopDomEvents;\n\t}\n\n\tisDown(code) {\n\t\treturn this._keys[code];\n\t}\n\n\tisPressed(code) {\n\t\treturn this._pressed[code];\n\t}\n\n\tresetPressed() {\n\t\tthis._pressed = [];\n\t}\n\n\t_stopEventIfRequired(e) {\n\t\tif (this._stopDomEvents) {\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\t\t}\n\t}\n\n\t_onKeyDown(e) {\n\t\tthis._pressed[e.keyCode] = !this.isDown(e.keyCode);\n\t\tthis._keys[e.keyCode] = true;\n\t\tthis._stopEventIfRequired(e);\n\t}\n\n\t_onKeyUp(e) {\n\t\tthis._keys[e.keyCode] = false;\n\t\tthis._pressed[e.keyCode] = false;\n\t\tthis._stopEventIfRequired(e);\n\t}\n\n\t/**\n\t * Attach the listeners to the mouseXXX DOM events\n\t */\n\t_attachDomListeners() {\n\t\tlet el = this._element;\n\n\t\tel.addEventListener('keydown', this._onKeyDown, false);\n\t\tel.addEventListener('keyup', this._onKeyUp, false);\n\t}\n\n\t/**\n\t * Attach the listeners to the mouseXXX DOM events\n\t */\n\t_detachDomListeners() {\n\t\tlet el = this._element;\n\n\t\tel.removeEventListener('keydown', this._onKeyDown, false);\n\t\tel.removeEventListener('keyup', this._onKeyUp, false);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/input/Keyboard.js\n **/","'use strict';\n\nexport default class EventEmitter {\n\tconstructor() {\n\t\tthis._listeners = {};\n\t}\n\n\taddListener(type, listener) {\n\t\tif (typeof listener !== 'function') {\n\t\t\tthrow Error('Listener must be a function');\n\t\t}\n\n\t\tif (!this._listeners[type]) {\n\t\t\tthis._listeners[type] = [];\n\t\t}\n\n\t\tthis._listeners[type].push(listener);\n\t}\n\n\tremoveListener(type, listener) {\n\t\tif (typeof listener !== 'function') {\n\t\t\tthrow Error('Listener must be a function');\n\t\t}\n\n\t\tif (!this._listeners[type]) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet position = this._listeners[type].indexOf(listener);\n\n\t\tif (position !== -1) {\n\t\t\tthis._listeners[type].splice(position, 1);\n\t\t}\n\t}\n\n\tremoveAllListeners(type) {\n\t\tif (type) {\n\t\t\tthis._listeners[type] = [];\n\t\t} else {\n\t\t\tthis._listeners = {};\n\t\t}\n\t}\n\n\temit(type, event) {\n\t\tif (!(this._listeners[type] && this._listeners[type].length)) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = 0; i < this._listeners[type].length; i++) {\n\t\t\tthis._listeners[type][i].call(this, event);\n\t\t}\n\t}\n}\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/EventEmitter.js\n **/","'use strict';\n\n/**\n * The implementation of the InputHandler for the touch interfaces.\n * Based on the touch events.\n */\n\nimport InputHandlerBase from './InputHandlerBase';\n\nexport default class TouchInputHandler extends InputHandlerBase {\n\n\tconstructor(element) {\n\t\tsuper(element);\n\t\tthis._isDown = false;\n\t\tthis._lastInteractionCoordinates = {\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t};\n\t\tthis._onDownDomEvent = this._onDownDomEvent.bind(this);\n\t\tthis._onUpDomEvent = this._onUpDomEvent.bind(this);\n\t\tthis._onMoveDomEvent = this._onMoveDomEvent.bind(this);\n\t\tthis.attachTo(element);\n\t}\n\n\tisDown() {\n\t\treturn this._isDown;\n\t}\n\n\tgetCoordinates() {\n\t\treturn this._lastInteractionCoordinates;\n\t}\n\n\t_attachDomListeners() {\n\t\tlet el = this._element;\n\n\t\tel.addEventListener('touchstart', this._onDownDomEvent, false);\n\t\tel.addEventListener('touchend', this._onUpDomEvent, false);\n\t\tel.addEventListener('touchcancel', this._onUpDomEvent, false);\n\t\tel.addEventListener('touchmove', this._onMoveDomEvent, false);\n\t}\n\n\t_detachDomListeners() {\n\t\tlet el = this._element;\n\n\t\tel.removeEventListener('touchstart', this._onDownDomEvent, false);\n\t\tel.removeEventListener('touchend', this._onUpDomEvent, false);\n\t\tel.removeEventListener('touchcancel', this._onUpDomEvent, false);\n\t\tel.removeEventListener('touchmove', this._onMoveDomEvent, false);\n\t}\n\n\t_onDownDomEvent(e) {\n\t\tthis._lastInteractionCoordinates = this._getInputCoordinates(e);\n\t\tthis._isDown = true;\n\t\tsuper._onDownDomEvent(e);\n\t}\n\n\t_onUpDomEvent(e) {\n\t\tthis.emit('up', {\n\t\t\tx: this._lastInteractionCoordinates.x,\n\t\t\ty: this._lastInteractionCoordinates.y,\n\t\t\tmoved: this._moving,\n\t\t\tdomEvent: e\n\t\t});\n\t\tthis._stopEventIfRequired(e);\n\t\tthis._isDown = false;\n\t\tthis._moving = false;\n\t}\n\n\t_onMoveDomEvent(e) {\n\t\tthis._lastInteractionCoordinates = this._getInputCoordinates(e);\n\t\tsuper._onMoveDomEvent(e);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/input/TouchInputHandler.js\n **/","'use strict';\n\nimport EventEmitter from '../EventEmitter';\n\n/**\n * The \"abstract\" base for MouseInputHandler and TouchInputHandler. This class is not\n * supposed to be instantiated directly. It provides the common base for touch and\n * mouse input handling.\n *\n * @param element the DOM element to work with - concrete input handlers will\n * register as event handlers of this element. In gamedev projects the\n * element is usually the main canvas\n */\nexport default class InputHandlerBase extends EventEmitter {\n\n\tconstructor(element) {\n\t\tsuper();\n\n\t\t// The DOM element, descendants will set this in attach()\n\t\tthis._element = null;\n\t\tthis._moving = false;\n\t\tthis._lastMoveCoordinates = null;\n\t\tthis._moveThreshold = 10;\n\t\tthis._stopDomEvents = false;\n\t}\n\n\tdetach() {\n\t\tif (this._element) {\n\t\t\tthis._detachDomListeners();\n\t\t\tthis._element = null;\n\t\t}\n\t}\n\n\tattachTo(el) {\n\t\tif (this._element) {\n\t\t\tthis._detachDomListeners();\n\t\t}\n\n\t\tthis._element = el;\n\t\tif (el) {\n\t\t\tthis._attachDomListeners();\n\t\t}\n\t}\n\n\tgetMoveThreshold() {\n\t\treturn this._moveThreshold;\n\t}\n\n\tsetMoveThreshold(moveThreshold) {\n\t\tthis._moveThreshold = moveThreshold;\n\t}\n\n\tgetStopDomEvents() {\n\t\treturn this._stopDomEvents;\n\t}\n\n\tsetStopDomEvents(stopDomEvents) {\n\t\tthis._stopDomEvents = stopDomEvents;\n\t}\n\n\t/**\n\t * Listens to the \"down\" DOM events: mousedown and touchstart.\n\t * @param e DOM Event\n\t */\n\t_onDownDomEvent(e) {\n\t\t// We must save this coordinates to support the moveThreshold - this\n\t\t// may be the starting point of the movement, we can't simply\n\t\tlet coords = this._lastMoveCoordinates = this._getInputCoordinates(e);\n\n\t\t// Emit \"down\" event - all coordinates together with the\n\t\t// original DOM event are passed to listeners\n\t\tthis.emit('down', {x: coords.x, y: coords.y, domEvent: e});\n\n\t\t// Usually we want to stop original the DOM events\n\t\t// from further browser processing.\n\t\tthis._stopEventIfRequired(e);\n\t}\n\n\t/**\n\t * Listens to the \"up\" DOM events: mouseup and touchend. Touchend\n\t * doesn't have any coordinates associated with it so this function\n\t * will be overridden in TouchInputHandler\n\t * @param e DOM Event\n\t */\n\t_onUpDomEvent(e) {\n\t\t// Works exactly the same way as _onDownDomEvent\n\t\tlet coords = this._getInputCoordinates(e);\n\n\t\tthis.emit('up', {\n\t\t\tx: coords.x,\n\t\t\ty: coords.y,\n\t\t\tmoved: this._moving,\n\t\t\tdomEvent: e\n\t\t});\n\n\t\tthis._stopEventIfRequired(e);\n\n\t\t// The interaction is ended. Reset the flag\n\t\tthis._moving = false;\n\t}\n\n\t/**\n\t * Listens to the \"move\" DOM events: mousemove and touchmove.\n\t * This function keeps track of the distance travelled since the last\n\t * \"move\" action, besides it ignores the movement and swallows the event\n\t * if we are still within the _moveThreshold\n\t * @param e DOM event\n\t */\n\t_onMoveDomEvent(e) {\n\t\tlet coords = this._getInputCoordinates(e);\n\n\t\t// Calculate deltas\n\t\tlet deltaX = coords.x - this._lastMoveCoordinates.x;\n\t\tlet deltaY = coords.y - this._lastMoveCoordinates.y;\n\n\t\t// Check threshold, if the distance from the initial\n\t\t// tap to the current position is more than the threshold\n\t\t// value - qualify it as a real movement\n\t\tlet deltaMove = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n\t\tif (!this._moving && deltaMove > this._moveThreshold) {\n\t\t\tthis._moving = true;\n\t\t}\n\n\t\t// If the current interaction is \"moving\" (we crossed the threshold already) then emit\n\t\t// the event, otherwise, just ignore the interaction.\n\t\tif (this._moving) {\n\t\t\tthis.emit('move', {\n\t\t\t\tx: coords.x,\n\t\t\t\ty: coords.y,\n\t\t\t\tdeltaX: deltaX,\n\t\t\t\tdeltaY: deltaY,\n\t\t\t\tdomEvent: e\n\t\t\t});\n\t\t\tthis._lastMoveCoordinates = coords;\n\t\t}\n\n\t\tthis._stopEventIfRequired(e);\n\t};\n\n\t_stopEventIfRequired(e) {\n\t\tif (this._stopDomEvents) {\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\t\t}\n\t}\n\n\t_getInputCoordinates(e) {\n\t\tlet element = this._element;\n\t\tlet coords = e.targetTouches ? e.targetTouches[0] : e;\n\n\t\tlet x = (coords.pageX || coords.clientX + document.body.scrollLeft) -\n\t\t\telement.offsetLeft;\n\n\t\tlet y = (coords.pageY || coords.clientY + document.body.scrollTop) -\n\t\t\telement.offsetTop;\n\n\t\t// TODO: Change to destructuring\n\t\treturn {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/input/InputHandlerBase.js\n **/","'use strict';\n\nimport InputHandlerBase from './InputHandlerBase';\n\n/**\n * The implementation of the InputHandler for the desktop\n * browser based on the mouse events.\n */\nexport default class MouseInputHandler extends InputHandlerBase {\n\n\tconstructor(element) {\n\t\tsuper(element);\n\n\t\t// We need additional property to track if the\n\t\t// mouse is down.\n\t\tthis._mouseDown = false;\n\n\t\t// Bound functions\n\t\tthis._onDownDomEvent = this._onDownDomEvent.bind(this);\n\t\tthis._onUpDomEvent = this._onUpDomEvent.bind(this);\n\t\tthis._onMoveDomEvent = this._onMoveDomEvent.bind(this);\n\t\tthis._onMouseOut = this._onMouseOut.bind(this);\n\t\tthis._onHoverDomEvent = this._onHoverDomEvent.bind(this);\n\n\t\tthis._coords = {x: -1, y: -1};\n\t\tthis.attachTo(element);\n\t}\n\n\tisDown() {\n\t\treturn this._mouseDown;\n\t}\n\n\tgetCoordinates() {\n\t\treturn this._coords;\n\t}\n\n\t/**\n\t * Attach the listeners to the mouseXXX DOM events\n\t */\n\t_attachDomListeners() {\n\t\tlet el = this._element;\n\n\t\tel.addEventListener('mousedown', this._onDownDomEvent, false);\n\t\tel.addEventListener('mouseup', this._onUpDomEvent, false);\n\t\tel.addEventListener('mousemove', this._onMoveDomEvent, false);\n\t\tel.addEventListener('mouseout', this._onMouseOut, false);\n\t}\n\n\t/**\n\t * Attach the listeners to the mouseXXX DOM events\n\t */\n\t_detachDomListeners() {\n\t\tlet el = this._element;\n\n\t\tel.removeEventListener('mousedown', this._onDownDomEvent, false);\n\t\tel.removeEventListener('mouseup', this._onUpDomEvent, false);\n\t\tel.removeEventListener('mousemove', this._onMoveDomEvent, false);\n\t\tel.removeEventListener('mouseout', this._onMouseOut, false);\n\t}\n\n\t/**\n\t * This method (and the next one) is overridden,\n\t * because we have to track the state of the mouse.\n\t * This could also be done in the separate listener.\n\t */\n\t_onDownDomEvent(e) {\n\t\tthis._mouseDown = true;\n\t\tsuper._onDownDomEvent(e);\n\t}\n\n\t_onUpDomEvent(e) {\n\t\tthis._mouseDown = false;\n\t\tInputHandlerBase.prototype._onUpDomEvent.call(this, e);\n\t}\n\n\t/**\n\t * We process the move event only if the mouse button is\n\t * pressed, otherwise the DOM event is ignored.\n\t */\n\t_onMoveDomEvent(e) {\n\t\tif (this._mouseDown) {\n\t\t\tsuper._onMoveDomEvent(e);\n\t\t} else {\n\t\t\tthis._onHoverDomEvent(e);\n\t\t}\n\t}\n\n\t/**\n\t * Hover is for pointer-enabled interfaces. Should rename\n\t * move -> drag\n\t * hover -> move\n\t *\n\t * TODO: support deltas in hover\n\t */\n\t_onHoverDomEvent(e) {\n\t\tlet coords = this._coords = this._getInputCoordinates(e);\n\n\t\tthis.emit('hover', {\n\t\t\tx: coords.x, y: coords.y,\n\t\t\t/* deltaX: deltaX, deltaY: deltaY, */ domEvent: e\n\t\t});\n\t\tthis._stopEventIfRequired(e);\n\t}\n\n\t_onMouseOut() {\n\t\tthis._mouseDown = false;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/input/MouseInputHandler.js\n **/","'use strict';\n\nexport default class ImageManager {\n\tconstructor() {\n\t\tthis._imageQueue = [];\n\t\tthis._images = {};\n\t}\n\n\t_addImage(key, path) {\n\t\tthis._imageQueue.push({\n\t\t\tkey: key,\n\t\t\tpath: path\n\t\t});\n\t};\n\n\tload(images, onDone, onProgress) {\n\t\tlet noop = () => {};\n\t\tlet queue = this._imageQueue;\n\n\t\tfor (let im in images) {\n\t\t\tthis._addImage(im, images[im]);\n\t\t}\n\n\t\tonDone = onDone || noop;\n\t\tonProgress = onProgress || noop;\n\n\t\tthis._imageQueue = [];\n\n\t\tif (queue.length === 0) {\n\t\t\tonProgress(0, 0, null, null, true);\n\t\t\treturn;\n\t\t}\n\n\t\tlet itemCounter = {\n\t\t\tloaded: 0,\n\t\t\ttotal: queue.length\n\t\t};\n\n\t\tfor (let i = 0; i < queue.length; i++) {\n\t\t\tthis._loadItem(queue[i], itemCounter, onDone, onProgress);\n\t\t}\n\t}\n\n\t_loadItem(queueItem, itemCounter, onDone, onProgress) {\n\t\tlet self = this;\n\t\tlet img = new Image();\n\n\t\timg.onload = function () {\n\t\t\tself._images[queueItem.key] = img;\n\t\t\tself._onItemLoaded(queueItem, itemCounter,\n\t\t\t\tonDone, onProgress, true);\n\t\t};\n\n\t\timg.onerror = function () {\n\t\t\tself._images[queueItem.key] = self._placeholder;\n\t\t\tself._onItemLoaded(queueItem, itemCounter,\n\t\t\t\tonDone, onProgress, false);\n\t\t};\n\t\timg.src = queueItem.path;\n\t}\n\n\t_onItemLoaded(queueItem, itemCounter, onDone, onProgress, success) {\n\t\titemCounter.loaded++;\n\t\tonProgress(itemCounter.loaded, itemCounter.total,\n\t\t\tqueueItem.key, queueItem.path, success);\n\n\t\tif (itemCounter.loaded === itemCounter.total) {\n\t\t\tonDone();\n\t\t}\n\t}\n\n\tget(key) {\n\t\treturn this._images[key];\n\t}\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/ImageManager.js\n **/","'use strict';\n\nimport GameObject from './GameObject';\n\nexport default class GameScene extends GameObject {\n\tconstructor() {\n\t\tsuper();\n\t\tthis._gameContext = null;\n\t\tthis._clearColor = '#6296A6';\n\t\tthis._ignoreDirtyRectangles = true;\n\t}\n\n\tinit(gameContext) {\n\t\tthis._gameContext = gameContext;\n\t}\n\n\tupdate(fc) {\n\t\tsuper.update(fc);\n\t\tif (this._ignoreDirtyRectangles) {\n\t\t\tfc.dirtyRects.markAllDirty();\n\t\t}\n\t}\n\n\tdraw(fc) {\n\t\tlet ctx = fc.graphContext;\n\n\t\tctx.save();\n\t\tif (this._clearColor) {\n\t\t\tctx.fillStyle = this._clearColor;\n\t\t\tctx.fillRect(0, 0, fc.width, fc.height);\n\t\t}\n\t\tsuper.draw(fc);\n\t\tctx.restore();\n\t}\n\n\taddChild(child) {\n\t\tsuper.addChild(child);\n\t}\n\n\tregisterObject(obj) {\n\n\t}\n\n\tderegisterObject(obj) {\n\n\t}\n\n\tgetResource(name) {\n\t\treturn this._gameContext.resourceManager.get(name);\n\t}\n\n\tsetClearColor(clearColor) {\n\t\tthis._clearColor = clearColor;\n\t}\n\n\tsetIgnoreDirtyRectanges(flag) {\n\t\tthis._ignoreDirtyRectangles = flag;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/GameScene.js\n **/","'use strict';\n\nimport Rect from './Rect';\n\nimport {mat3} from 'gl-matrix';\n\nexport default class GameObject {\n\tconstructor() {\n\t\tthis._x = 0;\n\t\tthis._y = 0;\n\t\tthis._width = 0;\n\t\tthis._height = 0;\n\n\t\tthis._id = GameObject.uid++;\n\t\tthis._name = 'object_' + this._id;\n\n\t\tthis._anchorX = 0;\n\t\tthis._anchorY = 0;\n\n\t\tthis._rot = 0;\n\t\tthis._scale = 1;\n\n\t\tthis._relativeMatrix = mat3.create();\n\t\tthis._absoulteMatrix = mat3.create();\n\n\t\tthis._scene = null;\n\t\tthis._parent = null;\n\t\tthis._children = [];\n\t}\n\n\tupdate(fc) {\n\t\tthis._children.forEach(it => it.update(fc));\n\t}\n\n\tdraw(fc) {\n\t\tlet ctx = fc.graphContext;\n\n\t\tctx.save();\n\t\tthis._applyTransforms(ctx);\n\t\tthis._renderSelf(fc);\n\t\tthis._children.forEach(it => it.draw(fc));\n\t\tctx.restore();\n\t}\n\n\t_renderSelf(fc) {\n\n\t}\n\n\t_applyTransforms(ctx) {\n\t\tlet anchorX = this._anchorX * this._width;\n\t\tlet anchorY = this._anchorY * this._height;\n\n\t\tctx.translate(this._x - anchorX, this._y - anchorY);\n\n\t\tctx.translate(anchorX, anchorY);\n\t\tctx.rotate(this._rot);\n\n\t\tctx.scale(this._scale, this._scale);\n\t\tctx.translate(-anchorX, -anchorY);\n\t}\n\n\tbeforeAddedToParent() {\n\n\t}\n\n\tafterAddedToParent() {\n\n\t}\n\n\tbeforeRemovedFromParent() {\n\n\t}\n\n\tafterRemovedFromParent() {\n\n\t}\n\n\taddChild(child) {\n\t\tif (!child instanceof GameObject) {\n\t\t\tthrow Error('Child must be a GameObject');\n\t\t}\n\n\t\tchild.beforeAddedToParent();\n\t\tthis._children.push(child);\n\t\tchild.setParent(this);\n\t\tchild.afterAddedToParent();\n\t}\n\n\tremoveChild(child) {\n\t\tlet idx = this._children.indexOf(child);\n\n\t\tif (idx > -1) {\n\t\t\tchild.beforeRemovedFromParent();\n\t\t\tchild.setParent(null);\n\t\t\tlet removedChild = this._children.splice(idx, 1);\n\n\t\t\tchild.afterRemovedFromParent();\n\t\t\treturn removedChild;\n\t\t}\n\t}\n\n\tgetChildren() {\n\t\treturn this._children;\n\t}\n\n\tsetParent(parent) {\n\t\tthis._parent = parent;\n\t}\n\n\tsetScene(scene) {\n\t\tthis._scene = scene;\n\t}\n\n\tgetScene() {\n\t\treturn this._scene;\n\t}\n\n\tgetParent() {\n\t\treturn this._parent;\n\t}\n\n\tgetId() {\n\t\treturn this._id;\n\t}\n\n\tgetName() {\n\t\treturn this._name;\n\t}\n\n\tsetName() {\n\t\treturn this._name;\n\t}\n\n\tsetPos(x, y) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t}\n\n\tsetSize(w, h) {\n\t\tthis._width = w;\n\t\tthis._height = h;\n\t}\n\n\tgetWidth() {\n\t\treturn this._width;\n\t}\n\n\tgetHeight() {\n\t\treturn this._height;\n\t}\n\n\tmove(dx, dy) {\n\t\tthis._x += dx;\n\t\tthis._y += dy;\n\t}\n\n\tgetPos() {\n\t\treturn {\n\t\t\tx: this._x,\n\t\t\ty: this._y\n\t\t};\n\t}\n\n\tsetRot(rot) {\n\t\tthis._rot = rot;\n\t}\n\n\tgetRot() {\n\t\treturn this._rot;\n\t}\n\n\tsetScale(scale) {\n\t\tthis._scale = scale;\n\t}\n\n\tgetScale() {\n\t\treturn this._scale;\n\t}\n\n\tgetAnchor() {\n\t\treturn {\n\t\t\tx: this._anchorX,\n\t\t\ty: this._anchorY\n\t\t};\n\t}\n\n\tsetAnchor(x, y) {\n\t\tthis._anchorX = x;\n\t\tthis._anchorY = y;\n\t}\n\n\tgetBoundingBox() {\n\t\treturn new Rect(this._x, this._y, this._width, this._height);\n\t}\n\n\tgetAbsoluteBoundingBox() {\n\n\t}\n\n\tdetach() {\n\t\tif (!this._parent) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._parent.removeChild(this);\n\t}\n}\n// should be static\nGameObject.uid = 1;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/GameObject.js\n **/","/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.2\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\nexports.glMatrix = require(\"./gl-matrix/common.js\");\nexports.mat2 = require(\"./gl-matrix/mat2.js\");\nexports.mat2d = require(\"./gl-matrix/mat2d.js\");\nexports.mat3 = require(\"./gl-matrix/mat3.js\");\nexports.mat4 = require(\"./gl-matrix/mat4.js\");\nexports.quat = require(\"./gl-matrix/quat.js\");\nexports.vec2 = require(\"./gl-matrix/vec2.js\");\nexports.vec3 = require(\"./gl-matrix/vec3.js\");\nexports.vec4 = require(\"./gl-matrix/vec4.js\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix.js\n ** module id = 13\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Configuration Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\nglMatrix.ENABLE_SIMD = false;\n\n// Capability detection\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);\nglMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less \n * than or equal to 1.0, and a relative tolerance is used for larger values)\n * \n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nglMatrix.equals = function(a, b) {\n\treturn Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nmodule.exports = glMatrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/common.js\n ** module id = 14\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nmat2.fromValues = function(m00, m01, m10, m11) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nmat2.set = function(out, m00, m01, m10, m11) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nmat2.sub = mat2.subtract;\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nmat2.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nmat2.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\nmodule.exports = mat2;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/mat2.js\n ** module id = 15\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nmat2d.fromValues = function(a, b, c, d, tx, ty) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nmat2d.set = function(out, a, b, c, d, tx, ty) {\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nmat2d.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nmat2d.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nmat2d.sub = mat2d.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nmat2d.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n};\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nmat2d.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n};\n\nmodule.exports = mat2d;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/mat2d.js\n ** module id = 16\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    return out;\n};\n\n/*\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && \n           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n};\n\n\nmodule.exports = mat3;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/mat3.js\n ** module id = 17\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {\n  scalar: {},\n  SIMD: {},\n};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.transpose = function(out, a) {\n    var a0, a1, a2, a3,\n        tmp01, tmp23,\n        out0, out1, out2, out3;\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    a1 = SIMD.Float32x4.load(a, 4);\n    a2 = SIMD.Float32x4.load(a, 8);\n    a3 = SIMD.Float32x4.load(a, 12);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 0,  out0);\n    SIMD.Float32x4.store(out, 4,  out1);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 8,  out2);\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Transpse a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;\n\n/**\n * Inverts a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Inverts a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.invert = function(out, a) {\n  var row0, row1, row2, row3,\n      tmp1,\n      minor0, minor1, minor2, minor3,\n      det,\n      a0 = SIMD.Float32x4.load(a, 0),\n      a1 = SIMD.Float32x4.load(a, 4),\n      a2 = SIMD.Float32x4.load(a, 8),\n      a3 = SIMD.Float32x4.load(a, 12);\n\n  // Compute matrix adjugate\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  // Compute matrix determinant\n  det   = SIMD.Float32x4.mul(row0, minor0);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);\n  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);\n  det   = SIMD.Float32x4.sub(\n               SIMD.Float32x4.add(tmp1, tmp1),\n               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));\n  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);\n  if (!det) {\n      return null;\n  }\n\n  // Compute matrix inverse\n  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));\n  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));\n  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));\n  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));\n  return out;\n}\n\n/**\n * Inverts a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;\n\n/**\n * Calculates the adjugate of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.adjoint = function(out, a) {\n  var a0, a1, a2, a3;\n  var row0, row1, row2, row3;\n  var tmp1;\n  var minor0, minor1, minor2, minor3;\n\n  var a0 = SIMD.Float32x4.load(a, 0);\n  var a1 = SIMD.Float32x4.load(a, 4);\n  var a2 = SIMD.Float32x4.load(a, 8);\n  var a3 = SIMD.Float32x4.load(a, 12);\n\n  // Transpose the source matrix.  Sort of.  Not a true transpose operation\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  SIMD.Float32x4.store(out, 0,  minor0);\n  SIMD.Float32x4.store(out, 4,  minor1);\n  SIMD.Float32x4.store(out, 8,  minor2);\n  SIMD.Float32x4.store(out, 12, minor3);\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand, must be a Float32Array\n * @param {mat4} b the second operand, must be a Float32Array\n * @returns {mat4} out\n */\nmat4.SIMD.multiply = function (out, a, b) {\n    var a0 = SIMD.Float32x4.load(a, 0);\n    var a1 = SIMD.Float32x4.load(a, 4);\n    var a2 = SIMD.Float32x4.load(a, 8);\n    var a3 = SIMD.Float32x4.load(a, 12);\n\n    var b0 = SIMD.Float32x4.load(b, 0);\n    var out0 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 0, out0);\n\n    var b1 = SIMD.Float32x4.load(b, 4);\n    var out1 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 4, out1);\n\n    var b2 = SIMD.Float32x4.load(b, 8);\n    var out2 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 8, out2);\n\n    var b3 = SIMD.Float32x4.load(b, 12);\n    var out3 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),\n                        SIMD.Float32x4.add(\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Multiplies two mat4's explicitly not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.scalar.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two mat4's using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.scalar.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.SIMD.translate = function (out, a, v) {\n    var a0 = SIMD.Float32x4.load(a, 0),\n        a1 = SIMD.Float32x4.load(a, 4),\n        a2 = SIMD.Float32x4.load(a, 8),\n        a3 = SIMD.Float32x4.load(a, 12),\n        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);\n\n    if (a !== out) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];\n        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];\n    }\n\n    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));\n    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));\n    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));\n\n    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));\n    SIMD.Float32x4.store(out, 12, t0);\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scalar.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.SIMD.scale = function(out, a, v) {\n    var a0, a1, a2;\n    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    SIMD.Float32x4.store(\n        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));\n\n    a1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(\n        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));\n\n    a2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(\n        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));\n\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n */\nmat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateX = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n      out[0]  = a[0];\n      out[1]  = a[1];\n      out[2]  = a[2];\n      out[3]  = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;\n\n/**\n * Rotates a matrix by the given angle around the Y axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateY = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;\n\n/**\n * Rotates a matrix by the given angle around the Z axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateZ = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) { \n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S; \n    out[2] = (mat[1] - mat[4]) / S; \n  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { \n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S; \n    out[2] = (mat[8] + mat[2]) / S; \n  } else if (mat[5] > mat[10]) { \n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S; \n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S; \n  } else { \n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n\n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n\n  return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    out[9] = a[9] + (b[9] * scale);\n    out[10] = a[10] + (b[10] * scale);\n    out[11] = a[11] + (b[11] * scale);\n    out[12] = a[12] + (b[12] * scale);\n    out[13] = a[13] + (b[13] * scale);\n    out[14] = a[14] + (b[14] * scale);\n    out[15] = a[15] + (b[15] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && \n           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && \n           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], \n        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], \n        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], \n        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], \n        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n};\n\n\n\nmodule.exports = mat4;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/mat4.js\n ** module id = 18\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\nvar mat3 = require(\"./mat3.js\");\nvar vec3 = require(\"./vec3.js\");\nvar vec4 = require(\"./vec4.js\");\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nquat.getAxisAngle = function(out_axis, q) {\n    var rad = Math.acos(q[3]) * 2.0;\n    var s = Math.sin(rad / 2.0);\n    if (s != 0.0) {\n        out_axis[0] = q[0] / s;\n        out_axis[1] = q[1] / s;\n        out_axis[2] = q[2] / s;\n    } else {\n        // If s is zero, return any axis (no rotation - axis does not matter)\n        out_axis[0] = 1;\n        out_axis[1] = 0;\n        out_axis[2] = 0;\n    }\n    return rad;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.equals = vec4.equals;\n\nmodule.exports = quat;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/quat.js\n ** module id = 19\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nmodule.exports = vec3;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/vec3.js\n ** module id = 20\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nvec4.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nvec4.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nvec4.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\nmodule.exports = vec4;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/vec4.js\n ** module id = 21\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\nmodule.exports = vec2;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/vec2.js\n ** module id = 22\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * Checks if we're working with the touchscreen or with the\n * regular desktop browser. Used to determine, what kind of events should we use:\n * mouse events or touch events.\n */\nfunction isTouchDevice() {\n\treturn ('ontouchstart' in document.documentElement);\n}\n\nfunction dist(x1, y1, x2, y2) {\n\treturn Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\n\nexport {isTouchDevice, dist};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/utils.js\n **/","'use strict';\n\nimport Rect from './Rect';\n\nlet MathUtils = {};\n\nMathUtils.getBoundingRectangle = function (points) {\n\tlet minX = Number.MAX_VALUE;\n\tlet minY = Number.MAX_VALUE;\n\tlet maxX = Number.MIN_VALUE;\n\tlet maxY = Number.MIN_VALUE;\n\n\tfor (let i = 0; i < points.length; i++) {\n\t\t// TODO Destructuring?\n\t\tlet x = points[i][0];\n\t\tlet y = points[i][1];\n\n\t\tif (x < minX) {\n\t\t\tminX = x;\n\t\t}\n\n\t\tif (x > maxX) {\n\t\t\tmaxX = x;\n\t\t}\n\n\t\tif (y < minY) {\n\t\t\tminY = y;\n\t\t}\n\n\t\tif (y > maxY) {\n\t\t\tmaxY = y;\n\t\t}\n\t}\n\n\tlet epsilon = Math.max(maxX - minX, maxY - minY) * 0.05;\n\n\tminX -= epsilon;\n\tmaxX += epsilon;\n\tminY -= epsilon;\n\tmaxY += epsilon;\n\treturn new Rect(minX, minY, maxX - minX, maxY - minY);\n};\n\n/**\n * http://stackoverflow.com/questions/563198\n */\n/* eslint-disable camelcase */\nMathUtils.linesIntersect = function (p0_x, p0_y, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y) {\n\n\tlet s1_x, s1_y, s2_x, s2_y;\n\n\ts1_x = p1_x - p0_x;\n\ts1_y = p1_y - p0_y;\n\ts2_x = p3_x - p2_x;\n\ts2_y = p3_y - p2_y;\n\n\tlet s, t;\n\n\ts = (-s1_y * (p0_x - p2_x) + s1_x * (p0_y - p2_y)) / (-s2_x * s1_y + s1_x * s2_y);\n\tt = (s2_x * (p0_y - p2_y) - s2_y * (p0_x - p2_x)) / (-s2_x * s1_y + s1_x * s2_y);\n\n\tif (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n\t\treturn [p0_x + (t * s1_x), p0_y + (t * s1_y)];\n\t}\n\n\treturn null;\n};\n/* eslint-enable camelcase */\n\nMathUtils.sign = function (number) {\n\treturn number > 0 ? 1 : number === 0 ? 0 : -1;\n};\n\nMathUtils.pointInsidePolygon = function (px, py, polygon, rayX, rayY) {\n\tif ((rayX === undefined || rayY === undefined)) {\n\t\tlet rect = MathUtils.getBoundingRectangle(polygon);\n\n\t\trayX = rect.x + rect.width;\n\t\trayY = py;\n\t}\n\n\tlet intersectCount = 0;\n\n\tfor (let i = 0; i < polygon.length; i++) {\n\t\tlet polyX0 = polygon[i][0];\n\t\tlet polyY0 = polygon[i][1];\n\t\tlet polyX1 = i + 1 === polygon.length ? polygon[0][0] : polygon[i + 1][0];\n\t\tlet polyY1 = i + 1 === polygon.length ? polygon[0][1] : polygon[i + 1][1];\n\n\t\tif (MathUtils.linesIntersect(px, py, rayX, rayY, polyX0, polyY0, polyX1, polyY1)) {\n\t\t\tintersectCount++;\n\t\t}\n\t}\n\treturn intersectCount % 2 === 1;\n};\n\n// Can be probably optimized by checking that the both points are on one\n// \"side\" of the poly\nMathUtils.segmentIntersectsPolygon = function (x0, y0, x1, y1, polygon) {\n\tfor (let i = 0; i < polygon.length; i++) {\n\t\tlet polyX0 = polygon[i][0];\n\t\tlet polyY0 = polygon[i][1];\n\t\tlet polyX1 = i + 1 === polygon.length ? polygon[0][0] : polygon[i + 1][0];\n\t\tlet polyY1 = i + 1 === polygon.length ? polygon[0][1] : polygon[i + 1][1];\n\n\t\tif (MathUtils.linesIntersect(x0, y0, x1, y1, polyX0, polyY0, polyX1, polyY1)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\nMathUtils.distance = function (x0, y0, x1, y1) {\n\treturn Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1));\n};\n\nMathUtils.distanceSquared = function (x0, y0, x1, y1) {\n\treturn (x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1);\n};\n\n// http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\nMathUtils.distanceFromPointToSegment = function (pX, pY, segStartX, segStartY, segEndX, segEndY) {\n\n\tlet lengthSquared = MathUtils.distanceSquared(segStartX, segStartY, segEndX, segEndY);\n\n\tif (lengthSquared === 0) {\n\t\treturn MathUtils.distance(pX, pY, segStartX, segStartY);\n\t}\n\n\tlet t = ((pX - segStartX) * (segEndX - segStartX) +\n\t\t(pY - segStartY) * (segEndY - segStartY)) / lengthSquared;\n\n\tif (t < 0) {\n\t\treturn MathUtils.distance(pX, pY, segStartX, segStartY);\n\t}\n\n\tif (t > 1) {\n\t\treturn MathUtils.distance(pX, pY, segEndX, segEndY);\n\t}\n\n\treturn MathUtils.distance(pX, pY,\n\t\tsegStartX + t * (segEndX - segStartX),\n\t\tsegStartY + t * (segEndY - segStartY));\n};\n\nMathUtils.distanceFromPointToPolygon = function (px, py, polyPoints) {\n\tlet minDist = MathUtils.distanceFromPointToSegment(px, py,\n\t\tpolyPoints[polyPoints.length - 1][0], polyPoints[polyPoints.length - 1][1],\n\t\tpolyPoints[0][0], polyPoints[0][1]);\n\n\tfor (let i = 1; i < polyPoints.length; i++) {\n\t\tlet dist = MathUtils.distanceFromPointToSegment(px, py,\n\t\t\tpolyPoints[i - 1][0], polyPoints[i - 1][1],\n\t\t\tpolyPoints[i][0], polyPoints[i][1]);\n\n\t\tif (dist < minDist) {\n\t\t\tminDist = dist;\n\t\t}\n\t}\n\n\treturn minDist;\n};\n\nexport default MathUtils;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/MathUtils.js\n **/","'use strict';\n\nimport Rectangle from './Rectangle';\nimport Shapes from './Shapes';\nimport Sprite from './Sprite';\nimport SpriteSheet from './SpriteSheet';\nimport TileSheet from './TileSheet';\nimport TileMapOrtho from './map/TileMapOrtho';\n\nexport {Rectangle, Shapes, Sprite, SpriteSheet, TileSheet, TileMapOrtho};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/ui/index.js\n **/","'use strict';\n\nimport GameObject from '../GameObject';\n\nexport default class Rectangle extends GameObject {\n\n\tdraw(fc) {\n\t\tlet gc = fc.graphContext;\n\n\t\tgc.fillStyle = 'green';\n\t\tgc.fillRect(this._x, this._y, 10, 10);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/ui/Rectangle.js\n **/","'use strict';\n\n/**\n * A number of utility methods for drawing the polygons,\n * agents (boids), arrows, fills, etc.\n */\nlet Shapes = {};\n\nShapes.drawMarker = function (ctx, x, y, size, lineWidth, color) {\n\tsize = size || 10;\n\tlineWidth = lineWidth || 5;\n\tcolor = color || 'blue';\n\tctx.save();\n\tctx.strokeStyle = color;\n\tctx.lineWidth = 5;\n\tctx.beginPath();\n\tctx.moveTo(x - size, y + size);\n\tctx.lineTo(x + size, y - size);\n\tctx.moveTo(x - size, y - size);\n\tctx.lineTo(x + size, y + size);\n\tctx.stroke();\n\tctx.restore();\n};\n\nShapes.drawArrow1 = function (ctx, x, y, length, offsetFromCenter, wingLength, wingDepth, angle) {\n\tlength = length || 50;\n\toffsetFromCenter = offsetFromCenter || 15;\n\twingLength = wingLength || 10;\n\twingDepth = wingDepth || 5;\n\tangle = angle || 0;\n\n\tctx.save();\n\tctx.fillStyle = 'green';\n\tctx.beginPath();\n\n\tif (angle) {\n\t\tctx.translate(x, y);\n\t\tctx.rotate(angle);\n\t\tctx.translate(-x, -y);\n\t}\n\n\tctx.moveTo(x + offsetFromCenter, y);\n\tctx.lineTo(x + offsetFromCenter - wingDepth, y - wingLength);\n\tctx.lineTo(x + offsetFromCenter + length, y);\n\tctx.lineTo(x + offsetFromCenter - wingDepth, y + wingLength);\n\n\tctx.closePath();\n\tctx.fill();\n\tctx.restore();\n};\n\nShapes.drawPolygon = function (ctx, points) {\n\tctx.save();\n\tctx.strokeStyle = 'lightblue';\n\tctx.fillStyle = 'rgba(173, 216, 230, 1)';\n\tctx.lineWidth = 5;\n\tctx.beginPath();\n\tctx.moveTo(points[0][0], points[0][1]);\n\tfor (let i = 1; i < points.length; i++) {\n\t\tctx.lineTo(points[i][0], points[i][1]);\n\t}\n\tctx.closePath();\n\tctx.fill();\n\tctx.stroke();\n\tctx.restore();\n};\n\nShapes.fillPolygon = function (ctx, points) {\n\tctx.save();\n\n\tctx.strokeStyle = 'grey';\n\tctx.lineWidth = 1;\n\n\tlet minX = Number.MAX_VALUE;\n\tlet minY = Number.MAX_VALUE;\n\tlet maxX = Number.MIN_VALUE;\n\tlet maxY = Number.MIN_VALUE;\n\n\tlet angle = Math.PI / 4;\n\n\tfor (let i = 0; i < points.length; i++) {\n\t\tif (points[i][0] < minX) {\n\t\t\tminX = points[i][0];\n\t\t}\n\n\t\tif (points[i][1] < minY) {\n\t\t\tminY = points[i][1];\n\t\t}\n\n\t\tif (points[i][0] > maxX) {\n\t\t\tmaxX = points[i][0];\n\t\t}\n\n\t\tif (points[i][1] > maxY) {\n\t\t\tmaxY = points[i][1];\n\t\t}\n\t}\n\n\tctx.beginPath();\n\tctx.moveTo(points[0][0], points[0][1]);\n\tfor (let i = 1; i < points.length; i++) {\n\t\tctx.lineTo(points[i][0], points[i][1]);\n\t}\n\tctx.closePath();\n\tctx.clip();\n\n\tlet linesOffset = (maxY - minY) / Math.tan(angle);\n\n\tctx.beginPath();\n\tfor (let i = minX - linesOffset; i < maxX; i += 15) {\n\t\tctx.moveTo(i, maxY);\n\t\tctx.lineTo(i + linesOffset, minY);\n\t}\n\n\tctx.stroke();\n\tctx.restore();\n};\n\nexport default Shapes;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/ui/Shapes.js\n **/","'use strict';\n\nimport GameObject from '../GameObject';\nimport Rect from '../Rect';\n\nexport default class Sprite extends GameObject {\n\n\tconstructor(img) {\n\t\tsuper();\n\t\tthis._img = img;\n\t\tthis._width = img.width;\n\t\tthis._height = img.height;\n\t\tthis._isPressed = false;\n\t\tthis._clicked = false;\n\t}\n\n\tsetSize(widthOrFraction, height) {\n\n\t\tif (height === undefined) {\n\t\t\tlet fraction = widthOrFraction;\n\n\t\t\twidthOrFraction = this._img.width * fraction;\n\t\t\theight = this._img.height * fraction;\n\t\t}\n\t\tthis._width = widthOrFraction;\n\t\tthis._height = height;\n\t}\n\n\tupdate(fc) {\n\n\t}\n\n\tdraw(fc) {\n\t\tlet ctx = fc.graphContext;\n\n\t\tctx.save();\n\t\tctx.drawImage(this._img, 0, 0,\n\t\t\tthis._img.width, this._img.height, this._x, this._y,\n\t\t\tthis._width, this._height);\n\t\tctx.restore();\n\t}\n\n\tgetBounds() {\n\t\treturn new Rect(this._x, this._y, this._width, this._height);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/ui/Sprite.js\n **/","'use strict';\r\n\r\n/**\r\n *\r\n * @param image the image object to use for drawing\r\n * @param frames the array describing the frames of the sprite sheet in a format:\r\n * [\r\n *     [x, y, width, height, anchorX, anchorY] // - frame 1\r\n *     [x, y, width, height, anchorX, anchorY] // - frame 2\r\n *     ...\r\n * ]\r\n */\r\n\r\nexport default class SpriteSheet {\r\n\tconstructor(image, frames) {\r\n\t\tthis._image = image;\r\n\t\tthis._frames = frames;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the frame of the sprite sheet in the given coordinates of the\r\n\t * Context.\r\n\t * @param ctx the context to draw at\r\n\t * @param index the index of the frame\r\n\t * @param x x coordinate where the anchor will appear\r\n\t * @param y y coordinate where the anchor will appear\r\n\t */\r\n\tdrawFrame(ctx, index, x, y) {\r\n\t\tlet frame = this._frames[index];\r\n\r\n\t\tif (!frame) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tctx.drawImage(this._image, frame[SpriteSheet.FRAME_X], frame[SpriteSheet.FRAME_Y],\r\n\t\t\tframe[SpriteSheet.FRAME_WIDTH], frame[SpriteSheet.FRAME_HEIGHT],\r\n\t\t\tx - frame[SpriteSheet.FRAME_ANCHOR_X], y - frame[SpriteSheet.FRAME_ANCHOR_Y],\r\n\t\t\tframe[SpriteSheet.FRAME_WIDTH], frame[SpriteSheet.FRAME_HEIGHT]);\r\n\t};\r\n}\r\n\r\nSpriteSheet.FRAME_X = 0;\r\nSpriteSheet.FRAME_Y = 1;\r\nSpriteSheet.FRAME_WIDTH = 2;\r\nSpriteSheet.FRAME_HEIGHT = 3;\r\nSpriteSheet.FRAME_ANCHOR_X = 4;\r\nSpriteSheet.FRAME_ANCHOR_Y = 5;\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/ui/SpriteSheet.js\n **/","'use strict';\n\nexport default class TileSheet {\n\tconstructor(image, w, h) {\n\t\tthis._image = image;\n\t\tthis._w = w;\n\t\tthis._h = h;\n\t\tthis._row = Math.floor(image.width / w);\n\t}\n\n\tdrawTile(ctx, index, x, y) {\n\t\tif (index < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet tx = (index % this._row) * this._w;\n\t\tlet ty = Math.floor(index / this._row) * this._h;\n\n\t\tctx.drawImage(this._image, tx, ty, this._w, this._h, x, y, this._w, this._h);\n\t};\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/ui/TileSheet.js\n **/","'use strict';\n\nimport GameObject from '../../GameObject';\n\nexport default class TileMapOrtho extends GameObject {\n\n\tconstructor(mapData, image, tileSize, viewportWidth, viewportHeight) {\n\t\tsuper();\n\t\tthis._mapData = mapData;\n\t\tthis._image = image;\n\t\tthis._tileSize = tileSize;\n\t\tthis._viewportWidth = viewportWidth;\n\t\tthis._viewportHeight = viewportHeight;\n\n\t\t// Coordinates of the map\n\t\tthis._x = 0;\n\t\tthis._y = 0;\n\n\t\t// Offscreen buffer\n\t\tthis._offCanvas = document.createElement('canvas');\n\t\tthis._offContext = this._offCanvas.getContext('2d');\n\t\tthis._offBounds = {x: 0, y: 0, w: 0, h: 0};\n\t\tthis._offDirty = true;\n\n\t\tthis._resetOffScreenCanvas();\n\n\t\t// The number of tiles in one row of the image\n\t\tthis._tilesPerRow = image.width / tileSize;\n\t}\n\n\t/* Draws the whole map */\n\tdraw(fc) {\n\t\tlet ctx = fc.graphContext;\n\n\t\tif (this._offDirty) {\n\t\t\tthis._redrawOffscreen();\n\t\t}\n\n\t\tlet offCanvasX = -Math.floor(this._x) - this._offBounds.x * this._tileSize;\n\t\tlet offCanvasY = -Math.floor(this._y) - this._offBounds.y * this._tileSize;\n\t\tlet offCanvasW = Math.min(this._offCanvas.width - offCanvasX, this._viewportWidth);\n\t\tlet offCanvasH = Math.min(this._offCanvas.height - offCanvasY, this._viewportHeight);\n\n\t\tctx.drawImage(this._offCanvas, offCanvasX, offCanvasY, offCanvasW, offCanvasH,\n\t\t\t0, 0, offCanvasW, offCanvasH);\n\t}\n\n\tmove(deltaX, deltaY) {\n\t\tthis._x += deltaX;\n\t\tthis._y += deltaY;\n\t\tthis._updateOffscreenBounds();\n\t}\n\n\tsetViewportSize(width, height) {\n\t\tthis._viewportWidth = width;\n\t\tthis._viewportHeight = height;\n\t\tthis._resetOffScreenCanvas();\n\t}\n\n\t_resetOffScreenCanvas() {\n\t\tthis._updateOffscreenBounds();\n\t\tthis._offCanvas.width = this._offBounds.w * this._tileSize;\n\t\tthis._offCanvas.height = this._offBounds.h * this._tileSize;\n\t\tthis._offDirty = true;\n\t}\n\n\t_redrawOffscreen() {\n\t\tlet ctx = this._offContext;\n\n\t\tctx.clearRect(0, 0, this._offCanvas.width, this._offCanvas.height);\n\n\t\tlet startX = Math.max(this._offBounds.x, 0);\n\t\tlet endX = Math.min(startX + this._offBounds.w - 1, this._mapData[0].length - 1);\n\n\t\tlet startY = Math.max(this._offBounds.y, 0);\n\t\tlet endY = Math.min(startY + this._offBounds.h - 1, this._mapData.length - 1);\n\n\t\tfor (let cellY = startY; cellY <= endY; cellY++) {\n\t\t\tfor (let cellX = startX; cellX <= endX; cellX++) {\n\t\t\t\tlet tileId = this._mapData[cellY][cellX];\n\n\t\t\t\tthis._drawTileAt(ctx, tileId, cellX, cellY);\n\t\t\t}\n\t\t}\n\t\tthis._offDirty = false;\n\t}\n\n\t_drawTileAt(ctx, tileId, cellX, cellY) {\n\n\t\t// Position of the tile inside of a tile sheet\n\t\tlet srcX = (tileId % this._tilesPerRow) * this._tileSize;\n\t\tlet srcY = Math.floor(tileId / this._tilesPerRow) * this._tileSize;\n\n\t\t// size of the tile\n\t\tlet size = this._tileSize;\n\n\t\t// position of the tile on the offscreen buffer\n\t\tlet destX = (cellX - this._offBounds.x) * size;\n\t\tlet destY = (cellY - this._offBounds.y) * size;\n\n\t\tctx.drawImage(this._image, srcX, srcY, size, size, destX, destY, size, size);\n\t}\n\n\t_updateOffscreenBounds() {\n\t\tlet oldBounds = this._offBounds;\n\n\t\tlet newBounds = {\n\t\t\tx: Math.floor(-this._x / this._tileSize),\n\t\t\ty: Math.floor(-this._y / this._tileSize),\n\t\t\tw: Math.ceil(this._viewportWidth / this._tileSize) + 1,\n\t\t\th: Math.ceil(this._viewportHeight / this._tileSize) + 1\n\t\t};\n\n\t\tif (!(oldBounds.x === newBounds.x &&\n\t\t\toldBounds.y === newBounds.y &&\n\t\t\toldBounds.w === newBounds.w &&\n\t\t\toldBounds.h === newBounds.h)) {\n\n\t\t\tthis._offBounds = newBounds;\n\t\t\tthis._offDirty = true;\n\t\t}\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/ui/map/TileMapOrtho.js\n **/"],"sourceRoot":""}